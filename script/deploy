#!/usr/bin/env bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Default values
LOCATION="${LOCATION:-japaneast}"
DEPLOYMENT_NAME="${DEPLOYMENT_NAME:-phoneappli-api-mcp-$(date +%Y%m%d-%H%M%S)}"
ENVIRONMENT="${ENVIRONMENT:-sandbox}"
# Use deployment name as resource group name
RESOURCE_GROUP="${DEPLOYMENT_NAME}"

# Validate environment
if [[ ! "${ENVIRONMENT}" =~ ^(sandbox|production)$ ]]; then
    echo -e "${RED}Error: Invalid environment '${ENVIRONMENT}'. Must be 'sandbox' or 'production'.${NC}"
    exit 1
fi

# Check for API key
if [ -z "${PHONEAPPLI_API_KEY}" ]; then
    echo -e "${RED}Error: PHONEAPPLI_API_KEY environment variable is not set.${NC}"
    echo "Please set it before running this script:"
    echo "  export PHONEAPPLI_API_KEY=\"your-api-key\""
    echo "Or run with: PHONEAPPLI_API_KEY=\"your-api-key\" script/deploy"
    if [ "${ENVIRONMENT}" == "production" ]; then
        echo "Note: For production environment, use: PHONEAPPLI_API_KEY=\"your-api-key\" ENVIRONMENT=production script/deploy"
    fi
    exit 1
fi

echo "==> Deploying PhoneAppli API MCP Server..."
echo ""
echo "Configuration:"
echo "  Resource Group: ${RESOURCE_GROUP}"
echo "  Location: ${LOCATION}"
echo "  Deployment Name: ${DEPLOYMENT_NAME}"
echo "  Environment: ${ENVIRONMENT}"
echo ""

# Check if logged in to Azure
if ! az account show &> /dev/null; then
    echo -e "${RED}Error: Not logged in to Azure.${NC}"
    echo "Please run: az login"
    exit 1
fi

# Create resource group if it doesn't exist
echo -n "Checking resource group... "
if ! az group show --name "${RESOURCE_GROUP}" &> /dev/null; then
    echo -e "${YELLOW}not found${NC}"
    echo "Creating resource group: ${RESOURCE_GROUP}"
    az group create --name "${RESOURCE_GROUP}" --location "${LOCATION}" --output table
    echo -e "${GREEN}✓ Resource group created${NC}"
else
    echo -e "${GREEN}✓ exists${NC}"
fi

# Deploy Bicep template
echo ""
echo "==> Deploying Bicep template..."
cd "${PROJECT_ROOT}/infra"

az deployment group create \
    --name "${DEPLOYMENT_NAME}" \
    --resource-group "${RESOURCE_GROUP}" \
    --template-file main.bicep \
    --parameters main.bicepparam \
    --parameters apimServiceName="${RESOURCE_GROUP}" \
    --parameters environment="${ENVIRONMENT}" \
    --parameters phoneAppliApiKey="${PHONEAPPLI_API_KEY}" \
    --output table

echo -e "${GREEN}✓ Bicep deployment completed${NC}"

# Get API Management service name from deployment outputs
echo ""
echo "==> Retrieving deployment outputs..."
APIM_NAME=$(az deployment group show \
    --name "${DEPLOYMENT_NAME}" \
    --resource-group "${RESOURCE_GROUP}" \
    --query 'properties.outputs.apimServiceName.value' \
    --output tsv)

APIM_ENDPOINT=$(az deployment group show \
    --name "${DEPLOYMENT_NAME}" \
    --resource-group "${RESOURCE_GROUP}" \
    --query 'properties.outputs.apimGatewayUrl.value' \
    --output tsv)

echo "  API Management Name: ${APIM_NAME}"
echo "  Gateway Endpoint: ${APIM_ENDPOINT}"

# Wait for API Management to be ready
echo ""
echo "==> Waiting for API Management service to be ready..."
MAX_WAIT=600  # 10 minutes
ELAPSED=0
while [ ${ELAPSED} -lt ${MAX_WAIT} ]; do
    PROVISIONING_STATE=$(az apim show \
        --name "${APIM_NAME}" \
        --resource-group "${RESOURCE_GROUP}" \
        --query 'provisioningState' \
        --output tsv)

    if [ "${PROVISIONING_STATE}" == "Succeeded" ]; then
        echo -e "${GREEN}✓ API Management is ready${NC}"
        break
    fi

    echo "  Status: ${PROVISIONING_STATE} (waiting...)"
    sleep 30
    ELAPSED=$((ELAPSED + 30))
done

if [ ${ELAPSED} -ge ${MAX_WAIT} ]; then
    echo -e "${RED}Error: API Management provisioning timed out${NC}"
    exit 1
fi

# Import OpenAPI specification
echo ""
echo "==> Importing OpenAPI specification..."
cd "${PROJECT_ROOT}"

uv run python src/import_api.py \
    --resource-group "${RESOURCE_GROUP}" \
    --apim-name "${APIM_NAME}" \
    --openapi-spec "docs/v1.20.0.yaml" \
    --environment "${ENVIRONMENT}"

echo -e "${GREEN}✓ API import completed${NC}"

# Display deployment information
echo ""
echo -e "${GREEN}==> Deployment completed successfully!${NC}"
echo ""
echo "Deployment Information:"
echo "  Resource Group: ${RESOURCE_GROUP}"
echo "  API Management: ${APIM_NAME}"
echo "  Gateway URL: ${APIM_ENDPOINT}"
echo "  Environment: ${ENVIRONMENT}"
if [ "${ENVIRONMENT}" == "sandbox" ]; then
    echo "  Backend URL: https://api-sandbox.phoneappli.net/v1"
else
    echo "  Backend URL: https://api.phoneappli.net/v1"
fi
echo ""
echo "Next steps:"
echo "  1. Test the API: curl ${APIM_ENDPOINT}/phoneappli"
echo "  2. View in Azure Portal: https://portal.azure.com/#resource/subscriptions/$(az account show --query id -o tsv)/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.ApiManagement/service/${APIM_NAME}"
