#!/usr/bin/env bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Parse command line arguments
COVERAGE=false
VERBOSE=false
WATCH=false
TEST_PATH="tests/"

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--coverage)
            COVERAGE=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -w|--watch)
            WATCH=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS] [TEST_PATH]"
            echo ""
            echo "Run unit tests for PhoneAppli API MCP Server"
            echo ""
            echo "Options:"
            echo "  -c, --coverage    Show coverage report"
            echo "  -v, --verbose     Verbose output"
            echo "  -w, --watch       Watch mode (requires pytest-watch)"
            echo "  -h, --help        Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0                          # Run all tests"
            echo "  $0 -c                       # Run tests with coverage"
            echo "  $0 -v                       # Run tests with verbose output"
            echo "  $0 tests/test_validate.py   # Run specific test file"
            echo "  $0 -c -v                    # Run with coverage and verbose output"
            exit 0
            ;;
        *)
            TEST_PATH="$1"
            shift
            ;;
    esac
done

echo -e "${CYAN}==> Running unit tests...${NC}"
echo "  Test path: ${TEST_PATH}"
echo ""

# Change to project root
cd "${PROJECT_ROOT}"

# Build pytest command
PYTEST_CMD="uv run pytest ${TEST_PATH}"

if [ "$VERBOSE" = true ]; then
    PYTEST_CMD="${PYTEST_CMD} -v"
fi

if [ "$COVERAGE" = true ]; then
    echo -e "${CYAN}==> Running tests with coverage report...${NC}"
    PYTEST_CMD="${PYTEST_CMD} --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml"
fi

# Run tests
if [ "$WATCH" = true ]; then
    echo -e "${YELLOW}Watch mode enabled. Press Ctrl+C to stop.${NC}"
    uv run ptw ${TEST_PATH}
else
    eval "${PYTEST_CMD}"
fi

EXIT_CODE=$?

echo ""
if [ ${EXIT_CODE} -eq 0 ]; then
    echo -e "${GREEN}==> All tests passed!${NC}"

    if [ "$COVERAGE" = true ]; then
        echo ""
        echo -e "${CYAN}Coverage report generated in: htmlcov/index.html${NC}"
        echo "  Open with: open htmlcov/index.html (macOS) or xdg-open htmlcov/index.html (Linux)"
    fi
else
    echo -e "${RED}==> Tests failed!${NC}"
    exit ${EXIT_CODE}
fi
